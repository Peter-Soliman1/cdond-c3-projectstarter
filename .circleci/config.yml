version: 2.1
orbs:
  node: circleci/node@4.1.0
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        backendStack:
            type: string
            default: "cicd-backend-stack"

        frontendStack:
            type: string
            default: "cicd-frontend-stack"  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-cicd-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name << parameters.backendStack >>
            aws cloudformation delete-stack --stack-name << parameters.frontendStack >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: abf60a14-7218-45d6-a980-3dc41980c676" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test
      - slack/notify:
          custom: |
            {
              "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ùå *Failure* in build #`${CIRCLE_BUILD_NUM}` of `${CIRCLE_PROJECT_REPONAME}` (`${CIRCLE_BRANCH}`)<br />${CIRCLE_PROJECT_USERNAME}: (`${CIRCLE_SHA1}`)"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Failed Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
              ]
            }
          event: fail
          channel: C01HACR5VQF 
            
  scan-frontend:
    executor:
      name: node/default
    steps:
        - checkout
        - run:
            name: Audit Frontend
            command: |
              cd frontend
              npm i
              npm audit --audit-level=critical

  scan-backend:
    executor:
      name: node/default
    steps:
        - checkout
        - run:
            name: Audit Backend
            command: |
              cd backend
              npm i
              npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install the tar package for the workspace step 
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cicd-backend \
              --stack-name cicd-backend-stack \
              --parameter-overrides ID="cicd-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cicd-frontend \
              --stack-name cicd-frontend-stack \
              --parameter-overrides ID="cicd-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:project,Values=cicd-backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '00:d6:44:d2:9a:0f:f1:24:d4:8e:6c:89:51:79:f4:d3'
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment     

  run-migrations:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations | tee migrations_result.txt
            if cat migrations_result.txt | grep "has been executed successfully" ; then
              curl -H "Content-Type: text/plain" -H "token: abf60a14-7218-45d6-a980-3dc41980c676" \
                          --request PUT --data "1" \
                          https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0-7}
            else
              curl -H "Content-Type: text/plain" -H "token: abf60a14-7218-45d6-a980-3dc41980c676" \
                          --request PUT --data "0" \
                          https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0-7}
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`cat ~/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 sync dist s3://udapeople-cicd-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
                    
  deploy-backend:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '00:d6:44:d2:9a:0f:f1:24:d4:8e:6c:89:51:79:f4:d3'
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl nodejs npm
            pip install awscli
            
      - run:
          name: Run migrations
          command: |
            cd backend
            touch .env
            echo -e "ENVIRONMENT=production" >> .env
            echo -e "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> .env
            echo -e "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> .env
            echo -e "NODE_ENV=production" >> .env
            echo -e "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo -e "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo -e "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo -e "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> .env 
            echo -e "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> .env
            echo -e "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo -e "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env
            echo -e VERSION=1 >> .env
            npm i
            npm run build

            rm -rf node_modules 
            rm -rf dist
            rm -rf test
            rm README.md
            
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=`cat ~/inventory.txt`
            echo "${BACKEND_IP}"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-cicd-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi        

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #      requires: [build-backend]
      #      context: slack-secrets
      # TODO: revert back changes as per the initial file
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]